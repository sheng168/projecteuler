package euler

import junit.framework._
import math.BigFraction

class P61 extends TestCase {
  import Assert._
  import math._
  
  def p3(n: Int) = n*(n+1)/2
  def p4(n: Int) = n * n
  def p5(n: Int) = n*(3*n-1)/2
  def p6(n: Int) = n*(2*n-1)
  def p7(n: Int) = n*(5*n-3)/2
  def p8(n: Int) = n*(3*n-2)
  
  def gen4digit(f: Int => Int) = {
    (1 to 9999).map(p => (p, f(p))).dropWhile(_._2<1000).takeWhile(_._2<10000)
  }
  
  def testFind {
    assertEquals(1, p3(8))
  }

  def testAnswer {
    val polys = List(p3 _,p4 _,p5 _,p6 _,p7 _,p8 _).map(gen4digit)
    polys.foreach(p => println(p.size, p))
    
    polys.fold(List())(_)
    polys.map(_.map(p => (p._1, p._2.toString.splitAt(2)))).foreach(println)
    assertEquals(153, gen4digit(p3))
  }
}
/*
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Square 	  	P4,n=n2 	  	1, 4, 9, 16, 25, ...
Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

    The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
    This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
*/